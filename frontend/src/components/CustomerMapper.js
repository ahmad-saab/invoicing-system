import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
  ArrowLeftIcon,
  DocumentTextIcon,
  CheckIcon,
  PlusIcon,
  TrashIcon,
  InformationCircleIcon,
  PencilIcon,
  XMarkIcon,
  BuildingStorefrontIcon,
  EnvelopeIcon,
  MapPinIcon,
  BanknotesIcon,
  IdentificationIcon
} from '@heroicons/react/24/outline';
import api from '../services/api';
import { toast } from 'react-toastify';

const CustomerMapper = () => {
  const { customerId } = useParams();
  const navigate = useNavigate();
  const [customer, setCustomer] = useState(null);
  const [mappings, setMappings] = useState({});
  const [loading, setLoading] = useState(true);
  const [paymentDays, setPaymentDays] = useState(30);
  const [editingCustomerInfo, setEditingCustomerInfo] = useState(false);
  const [editedCustomerData, setEditedCustomerData] = useState({});
  const [customerPricing, setCustomerPricing] = useState([]);
  const [productFields, setProductFields] = useState([
    { id: 'product_1', label: 'Product Line 1', example: 'Sunflower Oil 5L', required: false }
  ]);
  const [newPricing, setNewPricing] = useState({
    product_name: '',
    product_description: '',
    unit_price: '',
    currency: 'AED',
    uom: 'EACH',
    vat_rate: 5.0,
    vat_inclusive: false
  });
  const [vatConfig, setVatConfig] = useState({
    vat_rate: 5.0,
    vat_inclusive: false,
    default_currency: 'AED'
  });

  // Static Zoho Invoice Fields that need to be mapped
  const invoiceFields = [
    {
      section: 'CUSTOMER IDENTIFICATION',
      fields: [
        { id: 'customer_identifiers', label: 'Unique Customer Identifiers', example: 'Branch name, Store code, Location', required: true, 
          helpText: '⚠️ Important: Add text that uniquely identifies THIS customer when multiple customers share the same email' },
        { id: 'branch_identifier', label: 'Branch/Store Name', example: 'Mall of Emirates Branch, Store #123', required: false },
        { id: 'delivery_location', label: 'Delivery Location', example: 'Warehouse A, Dubai Marina', required: false },
        { id: 'account_number', label: 'Account/Reference Number', example: 'ACC-12345, REF: ABC-789', required: false },
      ]
    },
    {
      section: 'CUSTOMER DETAILS',
      fields: [
        { id: 'customer_name', label: 'Customer Name', example: 'ABC Trading LLC', required: true },
        { id: 'customer_email', label: 'Email Address', example: 'orders@abc.com', required: true },
        { id: 'customer_phone', label: 'Phone Number', example: '+971 50 123 4567', required: false },
        { id: 'customer_trn', label: 'TRN Number', example: '100123456789000', required: false },
        { id: 'billing_address', label: 'Billing Address', example: 'Dubai, UAE', required: true },
        { id: 'shipping_address', label: 'Shipping Address', example: 'Same as billing', required: false },
      ]
    },
    {
      section: 'INVOICE INFORMATION',
      fields: [
        { id: 'invoice_number_info', label: 'Invoice Number', example: 'Auto-generated by Zoho Books', required: false, isInfo: true },
        { id: 'po_identifier', label: 'PO Number Identifier', example: 'PO#, Order#', required: false },
        { id: 'date_format', label: 'Date Format', example: 'DD/MM/YYYY', required: false },
        { id: 'currency', label: 'Currency', example: 'AED', required: true },
      ]
    },
    {
      section: 'PRODUCT MAPPING',
      fields: productFields,
      isDynamic: true
    },
    {
      section: 'QUANTITY & PRICING',
      fields: [
        { id: 'quantity_pattern', label: 'Quantity Pattern', example: 'QTY, Quantity, Qty:', required: false },
        { id: 'price_pattern', label: 'Price Pattern', example: 'Price, Rate, @', required: false },
        { id: 'unit_pattern', label: 'Unit Pattern', example: 'PCS, KG, LTR, CASE', required: false },
        { id: 'total_pattern', label: 'Total Pattern', example: 'Total, Amount', required: false },
        { id: 'vat_rate', label: 'VAT Rate', example: '5%', required: true },
      ]
    },
    {
      section: 'PAYMENT CONFIGURATION',
      fields: [
        { id: 'payment_days', label: 'Payment Terms (Days after SOA)', example: '30', required: true, isConfig: true },
        { id: 'soa_note', label: 'SOA Schedule', example: 'Statement sent at month end', required: false, isStatic: true },
      ]
    }
  ];

  useEffect(() => {
    fetchCustomerData();
  }, [customerId]);

  const fetchCustomerData = async () => {
    try {
      setLoading(true);
      // Fetch customer details
      const custResponse = await api.get('/api/customers');
      const customerData = custResponse.data.data.find(c => c.customer_id === customerId);
      setCustomer(customerData);
      setEditedCustomerData(customerData || {});
      
      // Extract payment days from payment_term if exists (e.g., "30 days" -> 30)
      if (customerData?.payment_term) {
        const days = parseInt(customerData.payment_term.match(/\d+/)?.[0] || '30');
        setPaymentDays(days);
      }

      // Set VAT configuration
      if (customerData) {
        setVatConfig({
          vat_rate: customerData.vat_rate || 5.0,
          vat_inclusive: customerData.vat_inclusive || false,
          default_currency: customerData.default_currency || 'AED'
        });
      }

      // Fetch customer pricing
      try {
        const pricingResponse = await api.get(`/api/customers/${customerId}/pricing`);
        if (pricingResponse.data.status === 'success') {
          setCustomerPricing(pricingResponse.data.pricing || []);
        }
      } catch (error) {
        console.error('Error fetching pricing:', error);
      }

      // Fetch existing mappings
      const mappingResponse = await api.get(`/api/customers/${customerId}/mappings`);
      const existingMappings = {};
      let maxProductIndex = 1;
      
      mappingResponse.data.data.forEach(mapping => {
        if (!existingMappings[mapping.field_type]) {
          existingMappings[mapping.field_type] = [];
        }
        existingMappings[mapping.field_type].push({
          id: mapping.id,
          text: mapping.parsed_text,
          value: mapping.mapped_value
        });
        
        // Track the highest product field index
        if (mapping.field_type.startsWith('product_')) {
          const index = parseInt(mapping.field_type.split('_')[1]);
          if (!isNaN(index) && index > maxProductIndex) {
            maxProductIndex = index;
          }
        }
      });
      
      setMappings(existingMappings);
      
      // Set product fields based on existing mappings
      const newProductFields = [];
      for (let i = 1; i <= maxProductIndex; i++) {
        newProductFields.push({
          id: `product_${i}`,
          label: `Product Line ${i}`,
          example: i === 1 ? 'Sunflower Oil 5L' : 'Enter product name',
          required: false
        });
      }
      if (newProductFields.length > 0) {
        setProductFields(newProductFields);
      }
    } catch (error) {
      toast.error('Failed to load customer data');
    } finally {
      setLoading(false);
    }
  };

  const handleAddMapping = async (fieldId, pdfText, mappedValue) => {
    if (!pdfText || !mappedValue) {
      toast.warning('Please fill both fields');
      return;
    }

    try {
      await api.post(`/api/customers/${customerId}/mappings`, {
        parsed_text: pdfText,
        field_type: fieldId,
        mapped_value: mappedValue,
        description: `Zoho field: ${fieldId}`
      });
      
      // Update local state
      setMappings(prev => ({
        ...prev,
        [fieldId]: [...(prev[fieldId] || []), { 
          text: pdfText, 
          value: mappedValue,
          id: Date.now() // Temporary ID
        }]
      }));
      
      toast.success('Mapping added');
      
      // Clear the input fields
      document.getElementById(`${fieldId}_pdf`).value = '';
      document.getElementById(`${fieldId}_value`).value = '';
    } catch (error) {
      toast.error('Failed to add mapping');
    }
  };

  const handleDeleteMapping = async (fieldId, mappingId) => {
    try {
      await api.delete(`/api/customers/mappings/${mappingId}`);
      setMappings(prev => ({
        ...prev,
        [fieldId]: prev[fieldId].filter(m => m.id !== mappingId)
      }));
      toast.success('Mapping removed');
    } catch (error) {
      toast.error('Failed to delete mapping');
    }
  };

  const handleSavePaymentDays = async () => {
    try {
      // Update customer payment terms
      const response = await api.get('/api/customers');
      const customers = response.data.data;
      const currentCustomer = customers.find(c => c.customer_id === customerId);
      
      if (currentCustomer) {
        // Here you would call an API to update the customer
        // For now, we'll save it as a special mapping
        await api.post(`/api/customers/${customerId}/mappings`, {
          parsed_text: 'PAYMENT_DAYS_CONFIG',
          field_type: 'payment_days',
          mapped_value: paymentDays.toString(),
          description: `Payment terms: ${paymentDays} days after SOA`
        });
        toast.success(`Payment terms updated: ${paymentDays} days after SOA`);
      }
    } catch (error) {
      toast.error('Failed to update payment terms');
    }
  };

  const calculateDueDate = (invoiceDate) => {
    const date = new Date(invoiceDate);
    const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);
    lastDay.setDate(lastDay.getDate() + paymentDays);
    return lastDay.toLocaleDateString();
  };

  const getMappingForField = (fieldId) => {
    return mappings[fieldId] || [];
  };

  const handleSaveCustomerInfo = async () => {
    try {
      // Validate customer ID
      if (!editedCustomerData.customer_id || editedCustomerData.customer_id.trim() === '') {
        toast.error('Customer ID cannot be empty');
        return;
      }
      
      const response = await api.put(`/api/customers/${customerId}`, editedCustomerData);
      
      if (response.data.status === 'success') {
        // If customer ID changed, redirect to new URL
        if (editedCustomerData.customer_id !== customerId) {
          toast.success('Customer information updated. Redirecting...');
          // Use replace to prevent going back to old customer ID
          navigate(`/customers/${editedCustomerData.customer_id}/configure`, { replace: true });
          // Force reload to ensure fresh data
          window.location.reload();
        } else {
          // Update local state with saved data
          setCustomer(editedCustomerData);
          setEditingCustomerInfo(false);
          toast.success('Customer information updated');
          // Refresh customer data to ensure sync with database
          await fetchCustomerData();
        }
      }
    } catch (error) {
      console.error('Update error:', error);
      if (error.response?.data?.detail) {
        toast.error(error.response.data.detail);
      } else {
        toast.error('Failed to update customer information');
      }
    }
  };

  const handleCancelEdit = () => {
    setEditedCustomerData(customer);
    setEditingCustomerInfo(false);
  };

  // Dynamic Product Field Management
  const handleAddProductField = () => {
    // Find the highest existing index
    let maxIndex = 0;
    productFields.forEach(field => {
      const match = field.id.match(/product_(\d+)/);
      if (match) {
        const index = parseInt(match[1]);
        if (index > maxIndex) {
          maxIndex = index;
        }
      }
    });
    
    const nextIndex = maxIndex + 1;
    setProductFields([
      ...productFields,
      { 
        id: `product_${nextIndex}`, 
        label: `Product Line ${nextIndex}`, 
        example: 'Enter product name', 
        required: false 
      }
    ]);
    toast.success(`Added Product Line ${nextIndex}`);
  };

  const handleRemoveProductField = (fieldId) => {
    // Don't allow removing if only one field remains
    if (productFields.length === 1) {
      toast.error('At least one product line is required');
      return;
    }
    
    setProductFields(productFields.filter(field => field.id !== fieldId));
    
    // Also remove any mappings for this field
    if (mappings[fieldId]) {
      // Delete mappings from database
      mappings[fieldId].forEach(mapping => {
        api.delete(`/api/customers/mappings/${mapping.id}`).catch(console.error);
      });
      
      // Update local state
      setMappings(prev => {
        const newMappings = { ...prev };
        delete newMappings[fieldId];
        return newMappings;
      });
    }
    
    toast.success('Product line removed');
  };

  // Pricing Management Functions
  const handleAddPricing = async () => {
    if (!newPricing.product_name || !newPricing.unit_price) {
      toast.error('Product name and unit price are required');
      return;
    }

    try {
      const response = await api.post(`/api/customers/${customerId}/pricing`, newPricing);
      if (response.data.status === 'success') {
        toast.success('Pricing added successfully');
        // Refresh pricing list
        const pricingResponse = await api.get(`/api/customers/${customerId}/pricing`);
        setCustomerPricing(pricingResponse.data.pricing || []);
        // Reset form
        setNewPricing({
          product_name: '',
          product_description: '',
          unit_price: '',
          currency: 'AED',
          uom: 'EACH',
          vat_rate: 5.0,
          vat_inclusive: false
        });
      }
    } catch (error) {
      toast.error('Failed to add pricing');
    }
  };

  const handleDeletePricing = async (productName) => {
    if (!window.confirm(`Delete pricing for ${productName}?`)) return;
    
    try {
      const response = await api.delete(`/api/customers/${customerId}/pricing/${encodeURIComponent(productName)}`);
      if (response.data.status === 'success') {
        toast.success('Pricing deleted successfully');
        // Refresh pricing list
        const pricingResponse = await api.get(`/api/customers/${customerId}/pricing`);
        setCustomerPricing(pricingResponse.data.pricing || []);
      }
    } catch (error) {
      toast.error('Failed to delete pricing');
    }
  };

  const handleUpdateVatConfig = async () => {
    try {
      const response = await api.put(`/api/customers/${customerId}/vat`, vatConfig);
      if (response.data.status === 'success') {
        toast.success('VAT configuration updated successfully');
      }
    } catch (error) {
      toast.error('Failed to update VAT configuration');
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <button
                onClick={() => navigate('/customers')}
                className="mr-4 p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <ArrowLeftIcon className="h-5 w-5" />
              </button>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">
                  Mapping Configuration: {customer?.chain_alias || customer?.customer_id}
                </h1>
                <p className="text-sm text-gray-600 mt-1">
                  Teach the system how to read invoices from this customer
                </p>
              </div>
            </div>
            <div className="text-sm text-gray-500">
              <span className="font-medium">{customer?.email}</span>
              <span className="mx-2">•</span>
              <span>{customer?.place_of_supply}</span>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-6 py-6">
        {/* Customer Database Information */}
        <div className="bg-white rounded-lg shadow-sm mb-6">
          <div className="bg-gray-800 text-white px-6 py-3 rounded-t-lg flex justify-between items-center">
            <h2 className="font-semibold text-lg">CUSTOMER DATABASE INFORMATION</h2>
            {!editingCustomerInfo ? (
              <button
                onClick={() => setEditingCustomerInfo(true)}
                className="px-3 py-1 bg-blue-600 hover:bg-blue-700 rounded-lg flex items-center gap-2 text-sm"
              >
                <PencilIcon className="h-4 w-4" />
                Edit Information
              </button>
            ) : (
              <div className="flex gap-2">
                <button
                  onClick={handleSaveCustomerInfo}
                  className="px-3 py-1 bg-green-600 hover:bg-green-700 rounded-lg flex items-center gap-2 text-sm"
                >
                  <CheckIcon className="h-4 w-4" />
                  Save
                </button>
                <button
                  onClick={handleCancelEdit}
                  className="px-3 py-1 bg-red-600 hover:bg-red-700 rounded-lg flex items-center gap-2 text-sm"
                >
                  <XMarkIcon className="h-4 w-4" />
                  Cancel
                </button>
              </div>
            )}
          </div>
          
          <div className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Customer ID */}
              <div>
                <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
                  <IdentificationIcon className="h-4 w-4 mr-2" />
                  Customer ID
                </label>
                {editingCustomerInfo ? (
                  <input
                    type="text"
                    value={editedCustomerData.customer_id || ''}
                    onChange={(e) => setEditedCustomerData({...editedCustomerData, customer_id: e.target.value.toUpperCase().replace(/[^A-Z0-9_-]/g, '')})}
                    className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="e.g., CUSTOMER_001 or WINGSTOP_MOE"
                    title="Use letters, numbers, underscore and dash only"
                  />
                ) : (
                  <input
                    type="text"
                    value={customer?.customer_id || ''}
                    disabled
                    className="w-full px-3 py-2 border rounded-lg bg-gray-50"
                  />
                )}
                {editingCustomerInfo && customer?.customer_id?.startsWith('nan_') && (
                  <p className="text-xs text-amber-600 mt-1">⚠️ Please update this auto-generated ID to something meaningful</p>
                )}
              </div>

              {/* Business Name */}
              <div>
                <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
                  <BuildingStorefrontIcon className="h-4 w-4 mr-2" />
                  Business Name / Chain Alias
                </label>
                {editingCustomerInfo ? (
                  <input
                    type="text"
                    value={editedCustomerData.chain_alias || ''}
                    onChange={(e) => setEditedCustomerData({...editedCustomerData, chain_alias: e.target.value})}
                    className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Enter business name"
                  />
                ) : (
                  <input
                    type="text"
                    value={customer?.chain_alias || 'Not specified'}
                    disabled
                    className="w-full px-3 py-2 border rounded-lg bg-gray-50"
                  />
                )}
              </div>

              {/* Email */}
              <div>
                <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
                  <EnvelopeIcon className="h-4 w-4 mr-2" />
                  Email Address
                </label>
                {editingCustomerInfo ? (
                  <input
                    type="email"
                    value={editedCustomerData.email || ''}
                    onChange={(e) => setEditedCustomerData({...editedCustomerData, email: e.target.value})}
                    className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="customer@example.com"
                  />
                ) : (
                  <input
                    type="text"
                    value={customer?.email || ''}
                    disabled
                    className="w-full px-3 py-2 border rounded-lg bg-gray-50"
                  />
                )}
              </div>

              {/* TRN */}
              <div>
                <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
                  <IdentificationIcon className="h-4 w-4 mr-2" />
                  TRN Number
                </label>
                {editingCustomerInfo ? (
                  <input
                    type="text"
                    value={editedCustomerData.trn || ''}
                    onChange={(e) => setEditedCustomerData({...editedCustomerData, trn: e.target.value})}
                    className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Tax Registration Number"
                  />
                ) : (
                  <input
                    type="text"
                    value={customer?.trn || 'Not specified'}
                    disabled
                    className="w-full px-3 py-2 border rounded-lg bg-gray-50"
                  />
                )}
              </div>

              {/* Place of Supply */}
              <div>
                <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
                  <MapPinIcon className="h-4 w-4 mr-2" />
                  Place of Supply / Address
                </label>
                {editingCustomerInfo ? (
                  <textarea
                    value={editedCustomerData.place_of_supply || ''}
                    onChange={(e) => setEditedCustomerData({...editedCustomerData, place_of_supply: e.target.value})}
                    className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Business address"
                    rows="2"
                  />
                ) : (
                  <textarea
                    value={customer?.place_of_supply || 'Not specified'}
                    disabled
                    className="w-full px-3 py-2 border rounded-lg bg-gray-50"
                    rows="2"
                  />
                )}
              </div>

              {/* Payment Terms */}
              <div>
                <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
                  <BanknotesIcon className="h-4 w-4 mr-2" />
                  Payment Terms
                </label>
                {editingCustomerInfo ? (
                  <input
                    type="text"
                    value={editedCustomerData.payment_term || ''}
                    onChange={(e) => setEditedCustomerData({...editedCustomerData, payment_term: e.target.value})}
                    className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="e.g., 30 days"
                  />
                ) : (
                  <input
                    type="text"
                    value={customer?.payment_term || '30 days'}
                    disabled
                    className="w-full px-3 py-2 border rounded-lg bg-gray-50"
                  />
                )}
              </div>

              {/* Currency */}
              <div>
                <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
                  <BanknotesIcon className="h-4 w-4 mr-2" />
                  Currency
                </label>
                {editingCustomerInfo ? (
                  <select
                    value={editedCustomerData.currency || 'AED'}
                    onChange={(e) => setEditedCustomerData({...editedCustomerData, currency: e.target.value})}
                    className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="AED">AED - UAE Dirham</option>
                    <option value="USD">USD - US Dollar</option>
                    <option value="EUR">EUR - Euro</option>
                    <option value="GBP">GBP - British Pound</option>
                  </select>
                ) : (
                  <input
                    type="text"
                    value={customer?.currency || 'AED'}
                    disabled
                    className="w-full px-3 py-2 border rounded-lg bg-gray-50"
                  />
                )}
              </div>

              {/* Status */}
              <div>
                <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
                  <InformationCircleIcon className="h-4 w-4 mr-2" />
                  Status
                </label>
                <div className="flex items-center gap-2">
                  <span className={`px-3 py-2 rounded-lg text-sm font-medium ${
                    customer?.active ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-600'
                  }`}>
                    {customer?.active ? 'Active' : 'Inactive'}
                  </span>
                  <span className="text-xs text-gray-500">
                    Created: {customer?.created_at ? new Date(customer.created_at).toLocaleDateString() : 'Unknown'}
                  </span>
                </div>
              </div>
            </div>

            {/* Data Quality Check */}
            <div className="mt-6 p-4 bg-amber-50 border border-amber-200 rounded-lg">
              <h4 className="font-semibold text-amber-900 mb-2 flex items-center">
                <InformationCircleIcon className="h-5 w-5 mr-2" />
                Data Quality Check
              </h4>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-sm">
                <div className="flex items-center gap-2">
                  {customer?.chain_alias ? (
                    <CheckIcon className="h-4 w-4 text-green-600" />
                  ) : (
                    <XMarkIcon className="h-4 w-4 text-red-600" />
                  )}
                  <span>Business Name</span>
                </div>
                <div className="flex items-center gap-2">
                  {customer?.trn && customer.trn !== 'nan' ? (
                    <CheckIcon className="h-4 w-4 text-green-600" />
                  ) : (
                    <XMarkIcon className="h-4 w-4 text-red-600" />
                  )}
                  <span>TRN Number</span>
                </div>
                <div className="flex items-center gap-2">
                  {customer?.place_of_supply && customer.place_of_supply !== 'Dubai' ? (
                    <CheckIcon className="h-4 w-4 text-green-600" />
                  ) : (
                    <XMarkIcon className="h-4 w-4 text-amber-600" />
                  )}
                  <span>Full Address</span>
                </div>
                <div className="flex items-center gap-2">
                  {Object.keys(mappings).length > 0 ? (
                    <CheckIcon className="h-4 w-4 text-green-600" />
                  ) : (
                    <XMarkIcon className="h-4 w-4 text-red-600" />
                  )}
                  <span>{Object.keys(mappings).reduce((acc, key) => acc + (mappings[key]?.length || 0), 0)} Mappings</span>
                </div>
              </div>
              {(!customer?.chain_alias || !customer?.trn || customer?.trn === 'nan') && (
                <p className="text-xs text-amber-700 mt-3">
                  ⚠️ Some customer information is missing. Click "Edit Information" to complete the profile.
                </p>
              )}
            </div>
          </div>
        </div>

        {/* Instructions */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <div className="flex">
            <InformationCircleIcon className="h-5 w-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0" />
            <div className="text-sm text-blue-800">
              <p className="font-semibold mb-1">How to teach the system:</p>
              <ol className="list-decimal list-inside space-y-1">
                <li>On the LEFT: See the fields that Zoho Books needs for invoices</li>
                <li>On the RIGHT: Enter text patterns that appear in this customer's PDFs</li>
                <li>The system will learn to map PDF text to the correct Zoho fields</li>
                <li>Add multiple variations for better matching accuracy</li>
              </ol>
            </div>
          </div>
        </div>

        {/* Mapping Sections */}
        {invoiceFields.map((section) => (
          <div key={section.section} className="bg-white rounded-lg shadow-sm mb-6">
            <div className="bg-gray-800 text-white px-6 py-3 rounded-t-lg flex justify-between items-center">
              <h2 className="font-semibold text-lg">{section.section}</h2>
              {section.isDynamic && (
                <button
                  onClick={handleAddProductField}
                  className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm flex items-center"
                >
                  <PlusIcon className="h-4 w-4 mr-1" />
                  Add Product Line
                </button>
              )}
            </div>
            
            <div className="p-6">
              {section.fields.map((field) => (
                <div key={field.id} className="mb-6 last:mb-0">
                  {field.id === 'payment_days' ? (
                    // Special handling for payment days configuration
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                      <div className="bg-gray-50 p-4 rounded-lg">
                        <div className="mb-2">
                          <label className="font-semibold text-gray-900 flex items-center">
                            <DocumentTextIcon className="h-4 w-4 mr-2 text-gray-600" />
                            {field.label}
                            {field.required && <span className="ml-1 text-red-500">*</span>}
                          </label>
                          <p className="text-xs text-gray-500 mt-1">
                            Configure payment terms for invoices
                          </p>
                        </div>
                        <div className="mt-3 p-3 bg-white rounded border border-gray-200">
                          <p className="text-sm text-gray-600 mb-2">
                            Due Date = End of Month + Payment Days
                          </p>
                          <p className="text-xs text-gray-500">
                            Example: Invoice on Jan 15th with 30 days → Due Feb 28th (Jan 31 + 30 days)
                          </p>
                        </div>
                      </div>
                      
                      <div className="bg-yellow-50 p-4 rounded-lg">
                        <label className="font-semibold text-gray-900 block mb-3">
                          Payment Terms Configuration:
                        </label>
                        <div className="flex items-center gap-3">
                          <input
                            type="number"
                            value={paymentDays}
                            onChange={(e) => setPaymentDays(parseInt(e.target.value) || 0)}
                            className="w-24 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-center font-semibold"
                            min="0"
                            max="365"
                          />
                          <span className="text-gray-700">days after SOA (End of Month)</span>
                        </div>
                        <button
                          onClick={handleSavePaymentDays}
                          className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                        >
                          Save Payment Terms
                        </button>
                        <div className="mt-4 p-3 bg-white rounded border border-yellow-200">
                          <p className="text-sm font-medium text-gray-700">Current Setting:</p>
                          <p className="text-lg font-bold text-blue-600">{paymentDays} days after month end</p>
                        </div>
                      </div>
                    </div>
                  ) : field.isStatic || field.isInfo ? (
                    // Static information field
                    <div className="bg-gray-100 p-4 rounded-lg">
                      <div className="flex items-center">
                        <InformationCircleIcon className="h-5 w-5 text-gray-500 mr-2" />
                        <div>
                          <p className="text-sm font-medium text-gray-700">{field.label}</p>
                          <p className="text-sm text-gray-600">{field.example}</p>
                        </div>
                      </div>
                    </div>
                  ) : (
                    // Regular mapping fields
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {/* LEFT SIDE - Static Zoho Field */}
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <div className="flex items-start justify-between mb-2">
                        <div>
                          <label className="font-semibold text-gray-900 flex items-center">
                            <DocumentTextIcon className="h-4 w-4 mr-2 text-gray-600" />
                            {field.label}
                            {field.required && <span className="ml-1 text-red-500">*</span>}
                          </label>
                          <p className="text-xs text-gray-500 mt-1">
                            Zoho Field: <code className="bg-white px-1 rounded">{field.id}</code>
                          </p>
                        </div>
                        <div className="flex items-center space-x-2">
                          {mappings[field.id]?.length > 0 && (
                            <CheckIcon className="h-5 w-5 text-green-500" />
                          )}
                          {section.isDynamic && productFields.length > 1 && (
                            <button
                              onClick={() => handleRemoveProductField(field.id)}
                              className="text-red-500 hover:text-red-700"
                              title="Remove this product line"
                            >
                              <XMarkIcon className="h-5 w-5" />
                            </button>
                          )}
                        </div>
                      </div>
                      <div className="mt-3 p-3 bg-white rounded border border-gray-200">
                        <p className="text-sm text-gray-600">Expected value example:</p>
                        <p className="font-mono text-sm mt-1">{field.example}</p>
                        {field.helpText && (
                          <p className="text-xs text-amber-600 mt-2 font-medium">{field.helpText}</p>
                        )}
                      </div>
                    </div>

                    {/* RIGHT SIDE - Teaching Interface */}
                    <div className="bg-blue-50 p-4 rounded-lg">
                      <label className="font-semibold text-gray-900 block mb-3">
                        What to look for in PDFs:
                      </label>
                      
                      {/* Existing Mappings */}
                      {mappings[field.id]?.map((mapping, idx) => (
                        <div key={idx} className="flex items-center mb-2 bg-white p-2 rounded border border-blue-200">
                          <div className="flex-1">
                            <span className="text-xs text-gray-500">When PDF contains:</span>
                            <div className="font-mono text-sm text-blue-800">{mapping.text}</div>
                            <span className="text-xs text-gray-500">It means:</span>
                            <div className="font-semibold text-sm text-green-700">{mapping.value}</div>
                          </div>
                          <button
                            onClick={() => handleDeleteMapping(field.id, mapping.id)}
                            className="ml-2 p-1 text-red-500 hover:bg-red-50 rounded"
                          >
                            <TrashIcon className="h-4 w-4" />
                          </button>
                        </div>
                      ))}

                      {/* Add New Mapping */}
                      <div className="space-y-2">
                        <input
                          id={`${field.id}_pdf`}
                          type="text"
                          placeholder="Text in PDF (e.g., SUNFLOWER OIL 5LT)"
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                        />
                        <input
                          id={`${field.id}_value`}
                          type="text"
                          placeholder="What it means (e.g., Sunflower Oil 5 Liters)"
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                          onKeyPress={(e) => {
                            if (e.key === 'Enter') {
                              const pdfText = document.getElementById(`${field.id}_pdf`).value;
                              const value = e.target.value;
                              handleAddMapping(field.id, pdfText, value);
                            }
                          }}
                        />
                        <button
                          onClick={() => {
                            const pdfText = document.getElementById(`${field.id}_pdf`).value;
                            const value = document.getElementById(`${field.id}_value`).value;
                            handleAddMapping(field.id, pdfText, value);
                          }}
                          className="w-full px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center text-sm"
                        >
                          <PlusIcon className="h-4 w-4 mr-1" />
                          Add Mapping
                        </button>
                      </div>
                    </div>
                  </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        ))}

        {/* Customer Pricing Section */}
        <div className="bg-white rounded-lg shadow-sm mb-6">
          <div className="bg-blue-800 text-white px-6 py-3 rounded-t-lg">
            <h3 className="text-lg font-semibold">CUSTOMER PRICING</h3>
            <p className="text-sm text-blue-100 mt-1">
              Define custom pricing for products - these prices will be used instead of parsed PDF prices
            </p>
          </div>
          
          <div className="p-6">
            {/* VAT Configuration */}
            <div className="mb-6 p-4 bg-gray-50 rounded-lg">
              <h4 className="font-semibold text-gray-700 mb-3">VAT Configuration</h4>
              <div className="grid grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">VAT Rate (%)</label>
                  <input
                    type="number"
                    value={vatConfig.vat_rate}
                    onChange={(e) => setVatConfig({...vatConfig, vat_rate: parseFloat(e.target.value) || 0})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    step="0.1"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">VAT Type</label>
                  <select
                    value={vatConfig.vat_inclusive}
                    onChange={(e) => setVatConfig({...vatConfig, vat_inclusive: e.target.value === 'true'})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="false">VAT Exclusive (Add-on)</option>
                    <option value="true">VAT Inclusive</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Default Currency</label>
                  <select
                    value={vatConfig.default_currency}
                    onChange={(e) => setVatConfig({...vatConfig, default_currency: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="AED">AED</option>
                    <option value="USD">USD</option>
                    <option value="EUR">EUR</option>
                    <option value="GBP">GBP</option>
                  </select>
                </div>
              </div>
              <button
                onClick={handleUpdateVatConfig}
                className="mt-3 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                Update VAT Settings
              </button>
            </div>

            {/* Add New Pricing Form */}
            <div className="mb-6 p-4 bg-blue-50 rounded-lg">
              <h4 className="font-semibold text-gray-700 mb-3">Add Product Pricing</h4>
              <div className="grid grid-cols-2 gap-4 mb-3">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Product Name *</label>
                  <input
                    type="text"
                    value={newPricing.product_name}
                    onChange={(e) => setNewPricing({...newPricing, product_name: e.target.value})}
                    placeholder="e.g., Sunflower Oil 5L"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                  <input
                    type="text"
                    value={newPricing.product_description}
                    onChange={(e) => setNewPricing({...newPricing, product_description: e.target.value})}
                    placeholder="Optional product description"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
              </div>
              <div className="grid grid-cols-4 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Unit Price *</label>
                  <input
                    type="number"
                    value={newPricing.unit_price}
                    onChange={(e) => setNewPricing({...newPricing, unit_price: e.target.value})}
                    placeholder="0.00"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    step="0.01"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Currency</label>
                  <select
                    value={newPricing.currency}
                    onChange={(e) => setNewPricing({...newPricing, currency: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="AED">AED</option>
                    <option value="USD">USD</option>
                    <option value="EUR">EUR</option>
                    <option value="GBP">GBP</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Unit of Measure</label>
                  <select
                    value={newPricing.uom}
                    onChange={(e) => setNewPricing({...newPricing, uom: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="EACH">EACH</option>
                    <option value="KG">KG</option>
                    <option value="LTR">LTR</option>
                    <option value="CASE">CASE</option>
                    <option value="BOX">BOX</option>
                    <option value="PACK">PACK</option>
                    <option value="TIN">TIN</option>
                    <option value="BOTTLE">BOTTLE</option>
                    <option value="GALLON">GALLON</option>
                  </select>
                </div>
                <div className="flex items-end">
                  <button
                    onClick={handleAddPricing}
                    className="w-full px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center"
                  >
                    <PlusIcon className="h-5 w-5 mr-1" />
                    Add Pricing
                  </button>
                </div>
              </div>
            </div>

            {/* Existing Pricing List */}
            <div>
              <h4 className="font-semibold text-gray-700 mb-3">Current Product Pricing</h4>
              {customerPricing.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  <BanknotesIcon className="h-12 w-12 mx-auto mb-2 text-gray-300" />
                  <p>No custom pricing defined yet</p>
                  <p className="text-sm mt-1">Add product pricing above to override parsed prices</p>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">UOM</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">VAT</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {customerPricing.map((pricing, index) => (
                        <tr key={index} className="hover:bg-gray-50">
                          <td className="px-4 py-3 text-sm font-medium text-gray-900">{pricing.product_name}</td>
                          <td className="px-4 py-3 text-sm text-gray-500">{pricing.product_description || '-'}</td>
                          <td className="px-4 py-3 text-sm text-gray-900">
                            {pricing.currency} {parseFloat(pricing.unit_price).toFixed(2)}
                          </td>
                          <td className="px-4 py-3 text-sm text-gray-500">{pricing.uom}</td>
                          <td className="px-4 py-3 text-sm text-gray-500">
                            {pricing.vat_rate}% {pricing.vat_inclusive ? '(Incl)' : '(Excl)'}
                          </td>
                          <td className="px-4 py-3 text-sm">
                            <button
                              onClick={() => handleDeletePricing(pricing.product_name)}
                              className="text-red-600 hover:text-red-800"
                            >
                              <TrashIcon className="h-5 w-5" />
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Save Status */}
        <div className="bg-green-50 border border-green-200 rounded-lg p-4 text-center">
          <p className="text-green-800 font-medium">
            ✓ All mappings and pricing are automatically saved
          </p>
          <p className="text-sm text-green-600 mt-1">
            The system will use these mappings and custom pricing when parsing PDFs from {customer?.chain_alias || customer?.customer_id}
          </p>
        </div>
      </div>
    </div>
  );
};

export default CustomerMapper;